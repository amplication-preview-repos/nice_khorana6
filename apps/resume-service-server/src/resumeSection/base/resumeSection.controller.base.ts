/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResumeSectionService } from "../resumeSection.service";
import { ResumeSectionCreateInput } from "./ResumeSectionCreateInput";
import { ResumeSection } from "./ResumeSection";
import { ResumeSectionFindManyArgs } from "./ResumeSectionFindManyArgs";
import { ResumeSectionWhereUniqueInput } from "./ResumeSectionWhereUniqueInput";
import { ResumeSectionUpdateInput } from "./ResumeSectionUpdateInput";

export class ResumeSectionControllerBase {
  constructor(protected readonly service: ResumeSectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ResumeSection })
  async createResumeSection(
    @common.Body() data: ResumeSectionCreateInput
  ): Promise<ResumeSection> {
    return await this.service.createResumeSection({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        order: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ResumeSection] })
  @ApiNestedQuery(ResumeSectionFindManyArgs)
  async resumeSections(
    @common.Req() request: Request
  ): Promise<ResumeSection[]> {
    const args = plainToClass(ResumeSectionFindManyArgs, request.query);
    return this.service.resumeSections({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        order: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ResumeSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async resumeSection(
    @common.Param() params: ResumeSectionWhereUniqueInput
  ): Promise<ResumeSection | null> {
    const result = await this.service.resumeSection({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        order: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ResumeSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResumeSection(
    @common.Param() params: ResumeSectionWhereUniqueInput,
    @common.Body() data: ResumeSectionUpdateInput
  ): Promise<ResumeSection | null> {
    try {
      return await this.service.updateResumeSection({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          order: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ResumeSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResumeSection(
    @common.Param() params: ResumeSectionWhereUniqueInput
  ): Promise<ResumeSection | null> {
    try {
      return await this.service.deleteResumeSection({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          order: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
